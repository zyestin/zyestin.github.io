<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on zyestin</title>
    <link>https://zyestin.github.io/zyestin/posts/</link>
    <description>Recent content in Posts on zyestin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2023 12:00:11 +0800</lastBuildDate><atom:link href="https://zyestin.github.io/zyestin/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Native 在VSCode编码提效</title>
      <link>https://zyestin.github.io/zyestin/posts/rn/vscode-efficient/</link>
      <pubDate>Wed, 01 Nov 2023 12:00:11 +0800</pubDate>
      
      <guid>https://zyestin.github.io/zyestin/posts/rn/vscode-efficient/</guid>
      <description>插件 代码智能提示 copilot
触发内联建议 Option (⌥)+\ https://docs.github.com/zh/copilot/configuring-github-copilot/configuring-github-copilot-in-your-environment?tool=vscode#keyboard-shortcuts-for-macos
(键联提示)代码片段
ES7+ React/Redux/React-Native snippets massCode assistant (配合打开massCode App使用) 标签修改 自动首尾同步 Auto Rename Tag
拼写检测 Code Spell Checker
格式化 prettier
提升阅读感受
Gitlens 悬停查看代码改动人 Material Icon Theme / vscode-icons 侧边导航区 目录展示icon indent-rainbow 标签开闭连线 Image Preview 在图片路径引用行 左侧展示icon code snippets React/Redux/React-Native snippets
指令说明：
https://github.com/ults-io/vscode-react-javascript-snippets/blob/HEAD/docs/Snippets.md
优点：
对常用的hooks支持的简直完美
可以试试输入useeff...。 会提示useEffectSnippet，enter后挨个填词，tab切换光标，set方法自动驼峰，简直完美！ 使用rnfes创建组件，会根据文件名 命名组件 想根据英文记忆一下快捷指令名称，可以参考 Fullstack React/React Native snippets
对快捷指令 都有英文解释
Mac、VSC快捷键 Mac 系统自带
(shift+) ctrl+ (option+) f/b (shift+) ctrl+ p/n VSC 更改了上述快捷键对应的指令，非常糟糕。可以调整下如下 VSC Next Change （Important）</description>
    </item>
    
    <item>
      <title>React Native 开发沉淀</title>
      <link>https://zyestin.github.io/zyestin/posts/rn/readme/</link>
      <pubDate>Wed, 01 Nov 2023 12:00:11 +0800</pubDate>
      
      <guid>https://zyestin.github.io/zyestin/posts/rn/readme/</guid>
      <description>自实现方案 代码规范
React Native 编码提效 on VSCode
基础组件封装
动态下载&amp;amp;应用字体
仿抖音/小红书等 对贴图进行拖拽、缩放、旋转的复杂手势
标签 富文本
瀑布流列表 自动滚动动画
横向 瀑布流列表
三方方案 react-native-exception-handler </description>
    </item>
    
    <item>
      <title>代码规范</title>
      <link>https://zyestin.github.io/zyestin/posts/rn/code-standards/</link>
      <pubDate>Wed, 01 Nov 2023 12:00:11 +0800</pubDate>
      
      <guid>https://zyestin.github.io/zyestin/posts/rn/code-standards/</guid>
      <description>讨论背景 相信大家写代码时 对自己都有一些要求，比如下面的
基本期望：写出他人能容易看懂的代码 更高追求：写出他人看起来很爽的代码 每经历一个阶段，大家都对编码有不同程度的进步提升，可以分享；同时也会积累一些场景下代码如屎的烦恼，想要破局。
于是，阶段性的，需要一个机会，大家开个交流会进行讨论
（对于每个个体）互通有无，集思广益，团队每人都有所提升 （对于互相之间协作）更多地了解到彼此 阅读代码、写代码的风格习惯，增进理解 （对于工作）对现阶段遇到的痛点，找出更优解，或制定调研计划 每次讨论，规范条款上的收获，不在于多少，至少会收获了一些代码细节上的技巧或认知，最重要的是 大大增进了互相的了解，协作起来将越来越紧密顺畅。
讨论成果 组件代码结构 关键点: 打开文件后，更方便的看到核心代码（那就尽量靠前咯）
也就是 render/return组件 之前的代码量尽可能少；那么，就需要通过函数提炼、划分职责等方式转移到别处。
组件代码 书写顺序 示例如下
// AAView.js import { xxCalculate, xxUploadEvent } from &amp;#39;app/components/XxModule&amp;#39; import AView from &amp;#39;./components/AView&amp;#39; import BView from &amp;#39;./components/BView&amp;#39; //$$ 用于组件函数内的变量 紧邻写在组件函数上方 const variableUsedInXXComp = ... //组件函数 const AAView = props =&amp;gt; { //$$ props解构, 放第一行 ///reason：即使AAView上面不写@param注释，通过这里的解构也能看出props的参数 const { paramA, paramB } = props //$$ 副作用函数(即use开头的函数)，写在顶层作用域， const [aEverClicked, setAEverClicked] = useState(false) const [bClickedTime, setBClickedTime] = useState(0) .</description>
    </item>
    
    <item>
      <title>hugo &#43; github pages usage</title>
      <link>https://zyestin.github.io/zyestin/posts/hugo-usage/</link>
      <pubDate>Thu, 24 Aug 2023 09:11:47 +0800</pubDate>
      
      <guid>https://zyestin.github.io/zyestin/posts/hugo-usage/</guid>
      <description>2023最新 hugo + github pages 使用方式
网上大多是hugo旧版的使用方式，有好几处明显差异的，不值得借鉴，反正我借鉴后出现各种莫名其妙问题
严格按照官方这两个链接，就不会出现问题:
hugo quick start hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo &amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34; &amp;gt;&amp;gt; hugo.toml hugo server hugo new content posts/my-first-post.md open content/posts/my-first-post.md //然后进行修改 hugo server -D //可以编辑后， 在 http://localhost:1313/ 进行预览 hugo //生成web静态资源，以便下一步提交github时进行部署 Host on GitHub Pages 需要注意的地方:
请先尝试 hugo文档里提供的theme，即ananke，走通一遍流程 我就采坑了，使用了另一个theme，后面在 localhost 一直不出现 my-first-post.md
.github/workflows/hugo.yaml 一定要注意修改 HUGO_VERSION 的值
my-first-post.md 注意删掉/注释掉 draft:true 这样 push到github时，public/index.html等几个文件中才包含了 my-first-post.md的内容，访问 https://zyestin.github.io/zyestin/ 时才能找到 my-first-post.</description>
    </item>
    
  </channel>
</rss>
