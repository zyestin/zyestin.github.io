<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>best-practice - Tag - zyestin</title>
        <link>https://zyestin.github.io/tags/best-practice/</link>
        <description>best-practice - Tag - zyestin</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>zyestin@gmail.com (zyestin)</managingEditor>
            <webMaster>zyestin@gmail.com (zyestin)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 05 Mar 2024 19:36:11 &#43;0800</lastBuildDate><atom:link href="https://zyestin.github.io/tags/best-practice/" rel="self" type="application/rss+xml" /><item>
    <title>瀑布流最佳实践：双列均匀分布，高度计算&amp;缓存</title>
    <link>https://zyestin.github.io/waterfall-perfect/</link>
    <pubDate>Tue, 05 Mar 2024 19:36:11 &#43;0800</pubDate>
    <author>zyestin</author>
    <guid>https://zyestin.github.io/waterfall-perfect/</guid>
    <description><![CDATA[MasonryFlashList 瀑布流布局列高不均 解决方案 瀑布流布局列高不均 演示效果
最终我对此做了回复 👉🏻 issues/946#issuecomment-1972392998
方法1：【仅解决了双列】58的方案 方案源码 👉🏻 https://github.com/jiangleo/react-native-classroom/blob/main/src/11_Waterfall/lib/RecyclerListView/WaterfallLayoutProvider.ts
但，只修改为了 支持双列瀑布流布局，也不是基于最新recyclerlistview版本
58大佬分析的 recyclerlistview的布局原理，Nice 方法2：【较完美的】Masonry layout manager and provider #526 方案 可惜，并没有被merge，作者似乎不再关注这个项目了。
然后，也没有提供patch，但有人提供了package 和 Demo，非常赞！
👉🏻 方案来源
package: recyclerlistview-masonrylayoutmanager Demo: https://snack.expo.dev/@robertli93/grid_example
Demo效果非常棒！ 滚动流畅 + 布局均匀 为何未被合并？
难道是因为PR评论区的已知小bug？还是作者不再维护？
方法3:【最完美】MasonryFlashList 本身支持优化排列 见官方文档 masonry#optimizeitemarrangement
1 If enabled, MasonryFlashList will try to reduce difference in column height by modifying item order. If true, specifying overrideItemLayout is required. Default value is false. 在看源码时，发现MasonryFlashList.tsx中，底部可见如下说明]]></description>
</item>
<item>
    <title>最佳实践 点赞(收藏等)状态的全局同步更新</title>
    <link>https://zyestin.github.io/status-sync-global/</link>
    <pubDate>Mon, 18 Dec 2023 12:00:11 &#43;0800</pubDate>
    <author>zyestin</author>
    <guid>https://zyestin.github.io/status-sync-global/</guid>
    <description><![CDATA[有这么一个常见的需求 在对某个帖子进行点赞后，该帖子所出现的各个地方，e.g.帖子列表(可能多处)、帖子详情(可能多个)，点赞状态实时同步、数量加/减1同步。
iOS 方案 在iOS，我是在每个帖子 所对应的 Model(数据)对象里 监听通知，判断 帖子ID，ID匹配 则更新 点赞状态，以此达到操作点赞后 实时同步同一帖子的点赞状态，非常简单好使！
RN 方案 但RN里，数据是一个{id:xx, ...}这样的对象，是不支持像在iOS那样，在这样对象里 写监听通知的代码的。
于是，那就放到hooks去实现。
Q：那需要什么样的hooks呢？ A：也就是需要怎样的 设计最优雅的API，or调用方式 （如下），才是决定了设计什么样的hooks函数
最优雅API 调用方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 const PostComp = () =&gt; { const { isActive: liked, activeCount: likeCount, changeActiveStatus: changeLikeStatus, } = useActiveStatus({ id: id, originalActiveCount: originalLikeCount, originalActiveStatus: originalLikedStatus, notificationKey: kPostLikeStatusChangeNotification, requestFunc: ({ isActive }) =&gt; { return likePost({ postId: id, isLike: isActive }); // send request to toggle liked status }, }); return ( &lt;View&gt; &lt;Icon liked={liked} /&gt; &lt;Text&gt;{likeCount}&lt;/Text&gt; &lt;Button onPress={() =&gt; { changeLikeStatus() }} /&gt; &lt;/View&gt; ) } useActiveStatus这个hooks的实现源码， 如下]]></description>
</item>
<item>
    <title>RN 动画 - 缩放、旋转、拖拽</title>
    <link>https://zyestin.github.io/multi-gestture-sticker/</link>
    <pubDate>Wed, 01 Nov 2023 12:00:11 &#43;0800</pubDate>
    <author>zyestin</author>
    <guid>https://zyestin.github.io/multi-gestture-sticker/</guid>
    <description><![CDATA[需求 仿抖音、小红书，图片视频编辑区，贴图、贴文字功能
View支持拖拽 View右下角有一个icon比较特殊，该icon可控制View缩放 icon随手指移动 View缩放（以View中心点为圆心） View会旋转（以View为中心点为圆心） icon位置一直保持在View右下角 View支持双指捏 进行缩放 效果图 源码 HBMultiGestureView.js calculator.js CornerToolGestureView.js 解读 HBMultiGestureView.js 使用的什么手势api？ 通过PanResponder为Animted.View添加手势
将不同的手势操作 处理为拖拽、旋转、缩放等UI表现，从哪着手？ 通过手势回调onPanResponderGrant、onPanResponderMove、onPanResponderRelease去
如何判断 确定是否操作的右下角特殊icon视图？ 右下角icon onLoad后，拿到target，通过入参rotateScaleTargetRef传递给HBMultiGestureView，HBMultiGestureView内 通过手势回调参数中的e.nativeEvent.target获取所操作的视图target，比较判断是否相等
解读 calculator.js 里面都是公式函数，用在HBMultiGestureView.js 中，处理这些核心计算：
计算两指连成的直线移动后的 角度， 从而确定 双指操作时的旋转角度
计算两指移动后与移动前相比 两指连线的倍数关系， 从而确定 双指操作时的放大倍数
计算A点、初始触摸位置B点、当前触摸位置C点，计算AC/AB放大比例， 从而确定单指拖动右下角按钮时的放大倍数
注：A点，即触摸开始时 视图的中心位置
计算向量AC与AB的夹角， 从而确定单指拖动右下角按钮时的旋转角度 解读 CornerToolGestureView.js CornerToolGestureView，是四个角落携带工具按钮的手势视图
基于HBMultiGestureView封装的，所以开发时真正用的是这个CornerToolGestureView
HBMultiGestureView就类似一个三方库，不是面向具体业务的，俗话说就是，开发时直接用它去组装UI 不够简单，于是封装为更好用的组件CornerToolGestureView，用于各个地方。
就像是react-native-fast-image，我们并不在开发功能时直接用它，往往会对这个三方组件封装一层(e.g.增加了设置error占位图能力)，再去用于各个地方，比如 我们封装的图片base组件]]></description>
</item>
<item>
    <title>实现 差不多理想的极简RN弹窗</title>
    <link>https://zyestin.github.io/alert-multiple/</link>
    <pubDate>Wed, 01 Nov 2023 12:00:11 &#43;0800</pubDate>
    <author>zyestin</author>
    <guid>https://zyestin.github.io/alert-multiple/</guid>
    <description><![CDATA[Q: 代码调用一个弹窗的极简方式是怎样的？ A: 这样子👉🏻 XxModuleAlert.show({..})
为了这个极简用法的目标，我曾经 使用rn-global-modal封装过TextInputAlert，但依然有些问题或难用点，比如遮挡了Toast、更改mask颜色要改源码、布局上有些非正常的地方
因为不希望弹窗遮挡Toast，于是研究了react-native-root-toast，用的react-native-root-siblings，从而找到了封装理想弹窗的更快的方式
于是，基于react-native-root-siblings 5.0.1，造了一个 AlertManager
Why need AlertManager 相信大家使用过RN官方Modal的，都知道，iOS弹窗无法弹两个，使用起来不满足高内聚低耦合，难受。。。
RN官方Modal 缺点：耦合过多！须visible属性，多1个import useState，多1行代码setVisble声明，弹窗组件须嵌入容器组件 rn-global-modal 优点：函数式调起弹窗，任意处可调用 缺点：iOS 不支持同时多层弹窗；toast的层级低于它 导致看不到/看不清 What AlertManager provide 封装者：封装出高度解耦的弹窗。 使用方：使用极简！ 优势 vs Modal：去掉visible vs rn-global-modal: 支持多层弹窗, TextInput弹窗对键盘支持更好？？ How to use AlertManager 使用方： 1 2 XxModuleAlert.show({...}); XxModuleAlert.hide(); 封装方: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class XxModuleAlert { static show() { AlertManager.show(&lt;XxModuleView /&gt;, { key: XxModuleView.]]></description>
</item>
<item>
    <title>封装 低耦合、易用的文本输入框弹窗</title>
    <link>https://zyestin.github.io/textinput-alert/</link>
    <pubDate>Wed, 01 Nov 2023 12:00:11 &#43;0800</pubDate>
    <author>zyestin</author>
    <guid>https://zyestin.github.io/textinput-alert/</guid>
    <description><![CDATA[效果展示/UI 切换输入法，避开键盘 输入/粘帖时，文字换行，输入框高度准确变化 使用/Usage 封装后，如下这样使用，解耦的干干净净
1 2 3 4 5 6 7 8 9 10 11 12 13 14 import TextInputAlert from &#34;./TextInputAlert&#34;; TextInputAlert.show({ text: &#34;hello&#34;, // maxLength: 20, onChange: function didInputChange(text_) { console.log(&#34;didInputChange::&gt;&gt;&#34;, text_); }, onCompleted: () =&gt; { console.log(&#34;onCompleted::&gt;&gt;&#34;, content); }, }); TextInputAlert.hide(); 像原生一样调api方式展示弹窗，不需要Modal那样耦合过多（视图嵌入、visible字段控制&hellip;）
源码/Code TextInputAlert]]></description>
</item>
<item>
    <title>远程字体的动态加载&amp;应用</title>
    <link>https://zyestin.github.io/art-text/</link>
    <pubDate>Wed, 01 Nov 2023 12:00:11 &#43;0800</pubDate>
    <author>zyestin</author>
    <guid>https://zyestin.github.io/art-text/</guid>
    <description><![CDATA[示例效果展示 切换到新字体，经过loading后，应用上新字体 切换到已加载过的字体，直接应用上 iOS Android 使用/Usage 封装后，如下这样使用，解耦的干干净净
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import { StyleSheet, Text, TouchableOpacity, View } from &#34;react-native&#34;; import React, { useState } from &#34;react&#34;; import ArtText from &#34;./ArtText&#34;; const ArtTextDemo = () =&gt; { const [fontInfoIndex, setFontInfoIndex] = useState(0); return ( &lt;View style={{ flex: 1, padding:100 }}&gt; &lt;TouchableOpacity style={{padding:10}} onPress={() =&gt; { setFontInfoIndex((fontInfoIndex + 1) % fontInfoList.]]></description>
</item>
</channel>
</rss>
